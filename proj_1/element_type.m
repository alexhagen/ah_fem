function [N_el_sym,G_el_sym,J_el_sym,qp_xi,qp_eta,omega] = ...
    element_type(element)
syms xi;
syms eta;
syms zeta;
if (strcmp(element.el_type,'quadratic quadrilateral'))
    % set up the constants for 2x2 gauss quadrature
    qp_xi = [-1/sqrt(3) 1/sqrt(3) 1/sqrt(3) -1/sqrt(3)];
    qp_eta = [-1/sqrt(3) -1/sqrt(3) 1/sqrt(3) 1/sqrt(3)];
    omega = [1 1 1 1];
    % Make the shape function for the 8 noded element
    N_el_sym = 0.25*[...
        -(1-xi)*(1-eta)*(1+xi+eta) ...
        -(1+xi)*(1-eta)*(1-xi+eta) ...
        -(1+xi)*(1+eta)*(1-xi-eta) ...
        -(1-xi)*(1+eta)*(1+xi-eta) ...
        2*(1-xi)*(1+xi)*(1-eta) ...
        2*(1+xi)*(1-eta)*(1+eta) ...
        2*(1-xi)*(1+xi)*(1+eta) ...
        2*(1-xi)*(1-eta)*(1+eta)];
    % Find the derivative of this for the 8 noded element
    G_el_sym =0.25*[...
        -(eta - 1)*(eta + xi + 1) - (eta - 1)*(xi - 1) ...
        (eta - 1)*(eta - xi + 1) - (eta - 1)*(xi + 1) ...
        (eta + 1)*(eta + xi - 1) + (eta + 1)*(xi + 1) ...
        (eta + 1)*(xi - eta + 1) + (eta + 1)*(xi - 1) ...
        2*(xi - 1)*(eta - 1) + 2*(eta - 1)*(xi + 1) ...
        -2*(eta - 1)*(eta + 1) ...
        -2*(xi - 1)*(eta + 1) - 2*(eta + 1)*(xi + 1) ...
        2*(eta - 1)*(eta + 1); ...
        -(xi - 1)*(eta + xi + 1) - (eta - 1)*(xi - 1) ...
        (xi + 1)*(eta - xi + 1) + (eta - 1)*(xi + 1) ...
        (xi + 1)*(eta + xi - 1) + (eta + 1)*(xi + 1) ...
        (xi - 1)*(xi - eta + 1) - (eta + 1)*(xi - 1) ...
        2*(xi - 1)*(xi + 1) ...
        -2*(xi + 1)*(eta - 1) - 2*(xi + 1)*(eta + 1) ...
        -2*(xi - 1)*(xi + 1) ...
        2*(xi - 1)*(eta - 1) + 2*(xi - 1)*(eta + 1)];
    % Construct the J matrix, which is the gradient matrix times
    % the global values
    J_el_sym = G_el_sym * ...
        [ element.global_corner_x' ...
        element.global_midside_x';
        element.global_corner_y' ...
        element.global_midside_y' ]';
else
    % set up the constants for 4 point gauss quadrature
    qp_xi = [0.6,0.2,0.2,1/3];
    qp_eta = [0.2,0.6,0.2,1/3];
    omega = [25/48 25/48 25/48 -27/48];
    % Make the shape function for the 6 noded element
    zeta = 1 - xi - eta;
    N_el_sym = [...
        xi*(2*xi - 1) ...
        eta*(2*eta - 1) ...
        zeta*(2*zeta - 1) ...
        4*xi*eta ...
        4*eta*zeta ...
        4*xi*zeta ];
    % Find the derivative of this for the 6 noded element
    G_el_sym = [ diff(N_el_sym,xi); ...
        diff(N_el_sym,eta); ];
    % find the zeta values, which are equal to 1 - xi - eta
    global_zeta = ones(1,numel(N_el_sym)) - ...
        [ element.global_corner_x' ...
        element.global_midside_x' ] - ...
        [ element.global_corner_y' ...
        element.global_midside_y' ];
    % Construct the J matrix, which is the gradient matrix times
    % the global values    
    J_el_sym = G_el_sym * ...
        [ element.global_corner_x' ...
        element.global_midside_x';
        element.global_corner_y' ...
        element.global_midside_y' ]';
end